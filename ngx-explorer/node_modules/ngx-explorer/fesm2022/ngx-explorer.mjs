import * as i0 from '@angular/core';
import { InjectionToken, inject, Injectable, Directive, EventEmitter, Output, HostListener, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild } from '@angular/core';
import { BehaviorSubject, Subscription, map as map$1, take } from 'rxjs';
import { tap, map } from 'rxjs/operators';
import { NgClass, NgTemplateOutlet, AsyncPipe, JsonPipe, NgComponentOutlet } from '@angular/common';

const DEFAULT_CONFIG = {
    homeNodeName: 'Files',
    multipleSelection: true,
    features: {
        delete: true,
        upload: true,
        download: true,
        rename: true,
        createDir: true,
    },
};
const VIEWS = new InjectionToken('NXE_VIEWS', {
    providedIn: 'root',
    factory: () => [
        {
            name: 'Icons',
            icon: 'nxe-th-large',
            component: IconsComponent,
        },
        {
            name: 'List',
            icon: 'nxe-menu',
            component: ListComponent,
        },
    ],
});
const CONFIG = new InjectionToken('NXE_CONFIG', {
    providedIn: 'root',
    factory: () => {
        const views = inject(VIEWS);
        const defaultView = views[0].name;
        return { ...DEFAULT_CONFIG, defaultView };
    },
});

class Utils {
    static { this.id = 0; }
    static createNode(name, parentId = 0, isLeaf = false, data = {}, expanded = false) {
        const id = ++this.id;
        return {
            id,
            name,
            parentId,
            data,
            isLeaf,
            expanded,
            children: [],
        };
    }
    static compareObjects(a, b) {
        return JSON.stringify(a) === JSON.stringify(b);
    }
}

class DataService {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: DataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: DataService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: DataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class ExplorerService {
    constructor() {
        this.dataService = inject(DataService);
        this.config = inject(CONFIG);
        this.views = inject(VIEWS);
        this.internalTree = Utils.createNode(this.config.homeNodeName || 'Home', 0, false, {}, true);
        this.flatPointers = { [this.internalTree.id]: this.internalTree };
        this.selectedNodes$$ = new BehaviorSubject([]);
        this.openedNode$$ = new BehaviorSubject(undefined);
        this.root$$ = new BehaviorSubject(this.internalTree);
        this.currentView$ = new BehaviorSubject(this.config.defaultView || this.views[0].name);
        /**
         * An Observable that emits the currently selected nodes in the explorer.
         * Subscribers can use this to react to changes in the selection.
         */
        this.selection$ = this.selectedNodes$$.asObservable();
        /**
         * An Observable that emits the currently opened directory in the explorer.
         * Subscribers can use this to react to changes in the opened directory.
         */
        this.openedDir$ = this.openedNode$$.asObservable();
        /**
         * An Observable that emits the root node of the explorer.
         * Subscribers can use this to react to changes in the root node.
         */
        this.root$ = this.root$$.asObservable();
    }
    /**
     * Returns the node with the given id.
     * @param id The id of the node to retrieve.
     */
    runFile(){
        const target = this.selectedNodes$$.value[0];
        this.dataService.runFile(target.data);
    }
    getNode(id) {
        return this.flatPointers[id];
    }
    /**
     * Sets the selected nodes in the explorer.
     * @param nodes The nodes to select.
     */
    select(nodes) {
        this.selectedNodes$$.next(nodes);
    }
    /**
     * Opens the node with the given id. If no id is provided, the root node is opened.
     * @param id The id of the node to open.
     */
    openNode(id) {
        if (!id) {
            id = this.internalTree.id;
        }
        this.getContent(id).subscribe(() => {
            const parent = this.flatPointers[id];
            this.openedNode$$.next(parent);
            this.selectedNodes$$.next([]);
        });
    }
    /**
     * Expands the node with the given id.
     * @param id The id of the node to expand.
     */
    expand(id) {
        const parent = this.flatPointers[id];
        parent.expanded = true;
        this.getContent(id).subscribe();
    }
    collapse(id) {
        const parent = this.flatPointers[id];
        parent.expanded = false;
        this.root$$.next(this.internalTree);
    }
    /**
     * Creates a new directory with the given name in the currently opened directory.
     * @param name The name of the new directory.
     */
    createDir(name) {
        if (this.config.features?.createDir === false) {
            throw new Error('Create directory feature is disabled');
        }
        const parent = this.openedNode$$.value;
        this.dataService.createDir(parent.data, name).subscribe(() => {
            this.refresh();
        });
    }
    /**
     * Refreshes the currently opened node.
     */
    refresh() {
        this.dataService.refresh().subscribe(data => this.openNode(this.openedNode$$.value.id));
    }
    /**
     * Renames the currently selected node.
     * @param name The new name for the node.
     */
    rename(name) {
        if (this.config.features?.rename === false) {
            throw new Error('Rename feature is disabled');
        }
        const nodes = this.selectedNodes$$.value;
        if (nodes.length > 1) {
            throw new Error('Multiple selection rename not supported');
        }
        if (nodes.length === 0) {
            throw new Error('Nothing selected to rename');
        }
        const node = nodes[0];
        this.dataService.rename(node.data, name).subscribe(() => {
            this.refresh();
        });
    }
    /**
     * Removes the currently selected nodes.
     */
    remove() {
        if (this.config.features?.delete === false) {
            throw new Error('Delete feature is disabled');
        }
        const selection = this.selectedNodes$$.value;
        if (selection.length === 0) {
            throw new Error('Nothing selected to remove');
        }
        const targets = selection.map((node) => this.flatPointers[node.id].data);
        this.dataService.delete(targets).subscribe(() => {
            this.refresh();
        });
    }
    /**
     * Uploads the given files to the currently opened directory.
     * @param files The files to upload.
     */
    upload(files) {
        if (this.config.features?.upload === false) {
            throw new Error('Upload feature is disabled');
        }
        const node = this.openedNode$$.value;
        this.dataService.uploadFiles(node.data, files).subscribe(() => {
            this.refresh();
        });
    }
    /**
     * Downloads the currently selected file.
     */
    download() {
        if (this.config.features?.download === false) {
            throw new Error('Download feature is disabled');
        }
        const target = this.selectedNodes$$.value[0];
        this.dataService.downloadFile(target.data).subscribe(() => {
            this.refresh();
        });
    }
    /**
     * Open node and get all parent nodes
     * Ideal for opening a previously opened node by value
     */
    openTree(data) {
        this.dataService.openTree(data).subscribe((dataNodes) => {
            const queue = [
                {
                    parent: this.internalTree,
                    children: dataNodes,
                },
            ];
            let lastParent = this.internalTree;
            while (queue.length > 0) {
                const { parent, children } = queue.shift();
                lastParent = parent;
                children.forEach((child) => {
                    const node = Utils.createNode(this.dataService.getName(child.data), parent.id, child.isLeaf, child.data);
                    parent.children.push(node);
                    this.flatPointers[node.id] = node;
                    if (!node.isLeaf && child.children && child.children.length > 0) {
                        parent.expanded = true;
                        queue.push({
                            parent: node,
                            children: child.children,
                        });
                    }
                });
            }
            this.root$$.next(this.internalTree);
            this.openedNode$$.next(lastParent);
            this.selectedNodes$$.next([]);
        });
    }
    getContent(id) {
        const parent = this.flatPointers[id];
        if (!parent) {
            throw new Error('Node not found');
        }
        //if (parent.isLeaf) {
        //    throw new Error('Cannot open a file node');
        //}
        return this.dataService.getContent(parent.data).pipe(tap(({ files, dirs }) => {
            const newDirNodes = dirs.map((data) => Utils.createNode(this.dataService.getName(data), id, false, data));
            const newFileNodes = files.map((data) => Utils.createNode(this.dataService.getName(data), id, true, data));
            const newChildren = newDirNodes.concat(newFileNodes);
            const added = newChildren.filter((c) => !parent.children.find((o) => Utils.compareObjects(o.data, c.data)));
            const removed = parent.children.filter((o) => !newChildren.find((c) => Utils.compareObjects(o.data, c.data)));
            removed.forEach((c) => {
                const index = parent.children.findIndex((o) => o.id === c.id);
                parent.children.splice(index, 1);
                delete this.flatPointers[c.id];
            });
            added.forEach((c) => {
                parent.children.push(c);
                this.flatPointers[c.id] = c;
            });
            const nodeChildren = parent.children.filter((c) => !c.isLeaf);
            const leafChildren = parent.children.filter((c) => c.isLeaf);
            parent.children = nodeChildren.concat(leafChildren);
            this.root$$.next(this.internalTree);
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ExplorerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ExplorerService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ExplorerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class BaseView {
    constructor() {
        this.selection = new Set();
        this.items = [];
        this.dragging = false;
        this.subs = new Subscription();
        this.explorerService = inject(ExplorerService);
        this.config = inject(CONFIG);
        this.subs.add(this.explorerService.openedDir$.subscribe((nodes) => {
            this.items = nodes ? nodes.children : [];
        }));
        this.subs.add(this.explorerService.selection$.subscribe((nodes) => {
            this.selection.clear();
            if (nodes) {
                this.selection = new Set(nodes.map((n) => n.id));
            }
        }));
    }
    select(event, item) {
        const shiftKeyPressed = event.shiftKey;
        const metaKeyPressed = event.metaKey || event.ctrlKey;
        if (this.config.multipleSelection && shiftKeyPressed) {
            if (this.selection.size === 0) {
                this.selection.add(item.id);
                this.shiftSelectionStartId = item.id;
            }
            else {
                this.selection.clear();
                const headIndex = this.items.findIndex((i) => i.id === this.shiftSelectionStartId);
                const currentIndex = this.items.findIndex((i) => i.id === item.id);
                const start = Math.min(headIndex, currentIndex);
                const end = Math.max(headIndex, currentIndex);
                for (let i = start; i <= end; i++) {
                    this.selection.add(this.items[i].id);
                }
            }
        }
        else {
            if (this.config.multipleSelection && metaKeyPressed) {
                if (this.selection.has(item.id)) {
                    this.selection.delete(item.id);
                }
                else {
                    this.selection.add(item.id);
                }
            }
            else {
                this.selection.clear();
                this.shiftSelectionStartId = item.id;
                this.selection.add(item.id);
            }
        }
        const nodes = this.items.filter((i) => this.selection.has(i.id));
        this.explorerService.select(nodes);
    }
    open(event, item) {
        const metaKeyPressed = event.metaKey || event.ctrlKey || event.shiftKey;
        if (!metaKeyPressed) {
            this.explorerService.openNode(item.id);
        }
    }
    isSelected(item) {
        return this.selection.has(item.id);
    }
    emptySpaceClick() {
        this.explorerService.select([]);
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: BaseView, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.2", type: BaseView, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: BaseView, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });

class DragDropDirective {
    constructor() {
        this.explorerService = inject(ExplorerService);
        this.dragEnter = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.dragLeave = new EventEmitter();
        this.dragDrop = new EventEmitter();
        this.dragging = new EventEmitter();
    }
    onDragEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.dragEnter.emit(event);
        this.dragging.emit(true);
    }
    onDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        this.dragOver.emit(event);
        this.dragging.emit(true);
    }
    onDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.dragLeave.emit(event);
        this.dragging.emit(false);
    }
    onDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        const files = event.dataTransfer.files;
        if (files.length > 0) {
            this.explorerService.upload(files);
            this.dragDrop.emit(files);
        }
        this.dragging.emit(false);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: DragDropDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.2", type: DragDropDirective, isStandalone: true, selector: "[nxeDragDrop]", outputs: { dragEnter: "dragEnter", dragOver: "dragOver", dragLeave: "dragLeave", dragDrop: "dragDrop", dragging: "dragging" }, host: { listeners: { "dragenter": "onDragEnter($event)", "dragover": "onDragOver($event)", "dragleave": "onDragLeave($event)", "drop": "onDrop($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: DragDropDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nxeDragDrop]',
                    standalone: true,
                }]
        }], propDecorators: { dragEnter: [{
                type: Output
            }], dragOver: [{
                type: Output
            }], dragLeave: [{
                type: Output
            }], dragDrop: [{
                type: Output
            }], dragging: [{
                type: Output
            }], onDragEnter: [{
                type: HostListener,
                args: ['dragenter', ['$event']]
            }], onDragOver: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragLeave: [{
                type: HostListener,
                args: ['dragleave', ['$event']]
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }] } });

class IconsComponent extends BaseView {
    constructor() {
        super();
        this.icons = {
            node: 'nxe-folder',
            leaf: 'nxe-doc',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: IconsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.2", type: IconsComponent, isStandalone: true, selector: "nxe-icons", usesInheritance: true, ngImport: i0, template: "<div class=\"nxe-icons\" nxeDragDrop (dragging)=\"dragging = $event\">\n    <div class=\"nxe-icons-drag\" [ngClass]=\"{ dragging: dragging }\"></div>\n    <div class=\"nxe-icons-backpad\" (click)=\"emptySpaceClick()\"></div>\n    <div class=\"nxe-icons-container\">\n        @for (item of items; track $index) {\n            <div class=\"nxe-icons-wrapper\" (dblclick)=\"open($event, item)\" (click)=\"select($event, item)\">\n                <div class=\"nxe-icons-wrapper-inner\" [ngClass]=\"{ 'nxe-icon-selected': isSelected(item) }\" [title]=\"item.name\">\n                    <div class=\"nxe-icons-icon\">\n                        <i [className]=\"item.isLeaf ? icons.leaf : icons.node\"></i>\n                    </div>\n                    <div class=\"nxe-icon-text\">{{ item.name }}</div>\n                </div>\n            </div>\n        }\n    </div>\n</div>\n", styles: [".nxe-icons{width:100%;height:100%;position:absolute;overflow-y:scroll;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nxe-icons .nxe-icons-drag{position:absolute;inset:2px}.nxe-icons .nxe-icons-drag.dragging{border:2px #30a2ff dashed;margin:-2px}.nxe-icons .nxe-icons-backpad{position:absolute;top:0;left:0;width:100%;height:100%}.nxe-icons .nxe-icons-container{display:flex;flex-wrap:wrap}.nxe-icons .nxe-icons-container .nxe-icons-wrapper{margin:10px 10px 0;height:110px;width:80px;display:inline-block;flex-grow:0;z-index:1}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner{border:1px solid transparent;padding-bottom:5px;text-align:center;border-radius:5px}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner:hover{cursor:pointer}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner .nxe-icons-icon{margin-top:5px}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner .nxe-icons-icon i{font-size:50px;color:#555}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner .nxe-icons-icon i.nxe-folder{color:#fdb900}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner .nxe-icons-icon i.nxe-doc{color:#555}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner.nxe-icon-selected{background-color:#f1f9ff;border:1px solid #94cfff}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icon-text{text-align:center;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical}\n"], dependencies: [{ kind: "directive", type: DragDropDirective, selector: "[nxeDragDrop]", outputs: ["dragEnter", "dragOver", "dragLeave", "dragDrop", "dragging"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: IconsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-icons', encapsulation: ViewEncapsulation.None, standalone: true, imports: [DragDropDirective, NgClass], template: "<div class=\"nxe-icons\" nxeDragDrop (dragging)=\"dragging = $event\">\n    <div class=\"nxe-icons-drag\" [ngClass]=\"{ dragging: dragging }\"></div>\n    <div class=\"nxe-icons-backpad\" (click)=\"emptySpaceClick()\"></div>\n    <div class=\"nxe-icons-container\">\n        @for (item of items; track $index) {\n            <div class=\"nxe-icons-wrapper\" (dblclick)=\"open($event, item)\" (click)=\"select($event, item)\">\n                <div class=\"nxe-icons-wrapper-inner\" [ngClass]=\"{ 'nxe-icon-selected': isSelected(item) }\" [title]=\"item.name\">\n                    <div class=\"nxe-icons-icon\">\n                        <i [className]=\"item.isLeaf ? icons.leaf : icons.node\"></i>\n                    </div>\n                    <div class=\"nxe-icon-text\">{{ item.name }}</div>\n                </div>\n            </div>\n        }\n    </div>\n</div>\n", styles: [".nxe-icons{width:100%;height:100%;position:absolute;overflow-y:scroll;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nxe-icons .nxe-icons-drag{position:absolute;inset:2px}.nxe-icons .nxe-icons-drag.dragging{border:2px #30a2ff dashed;margin:-2px}.nxe-icons .nxe-icons-backpad{position:absolute;top:0;left:0;width:100%;height:100%}.nxe-icons .nxe-icons-container{display:flex;flex-wrap:wrap}.nxe-icons .nxe-icons-container .nxe-icons-wrapper{margin:10px 10px 0;height:110px;width:80px;display:inline-block;flex-grow:0;z-index:1}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner{border:1px solid transparent;padding-bottom:5px;text-align:center;border-radius:5px}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner:hover{cursor:pointer}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner .nxe-icons-icon{margin-top:5px}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner .nxe-icons-icon i{font-size:50px;color:#555}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner .nxe-icons-icon i.nxe-folder{color:#fdb900}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner .nxe-icons-icon i.nxe-doc{color:#555}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icons-wrapper-inner.nxe-icon-selected{background-color:#f1f9ff;border:1px solid #94cfff}.nxe-icons .nxe-icons-container .nxe-icons-wrapper .nxe-icon-text{text-align:center;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical}\n"] }]
        }], ctorParameters: () => [] });

class TreeComponent {
    constructor() {
        this.explorerService = inject(ExplorerService);
        this.treeNodes = [];
        this.tree$ = this.explorerService.root$.pipe(map((r) => r.children));
        this.selectedId$ = this.explorerService.openedDir$.pipe(map((p) => p?.id));
    }
    open(node) {
        this.explorerService.openNode(node.id);
    }
    expand(event, node) {
        event.preventDefault();
        event.stopPropagation();
        this.explorerService.expand(node.id);
    }
    collapse(event, node) {
        event.preventDefault();
        event.stopPropagation();
        this.explorerService.collapse(node.id);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: TreeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.2", type: TreeComponent, isStandalone: true, selector: "nxe-tree", ngImport: i0, template: "<div class=\"nxe-tree\">\n    @if (tree$ | async; as tree) {\n        <ng-container *ngTemplateOutlet=\"treeTmp; context: { nodes: tree }\"> </ng-container>\n    }\n</div>\n\n<ng-template #treeTmp let-nodes=\"nodes\">\n    @if (nodes && nodes.length > 0) {\n        <ul class=\"nxe-tree-ul\">\n            @for (node of nodes; track $index) {\n                @if (!node.isLeaf) {\n                    <li>\n                        <div class=\"item\" (click)=\"open(node)\" [ngClass]=\"{ selected: (selectedId$ | async) === node.id }\">\n                            @if (!node.expanded) {\n                                <div class=\"chevron\" (click)=\"expand($event, node)\"><i class=\"nxe-angle-right\" aria-hidden=\"true\"></i></div>\n                            } @else {\n                                <div class=\"chevron\" (click)=\"collapse($event, node)\">\n                                    <i class=\"nxe-angle-down\" aria-hidden=\"true\"></i>\n                                </div>\n                            }\n                            <div class=\"dir-icon\"><i class=\"nxe-folder\" aria-hidden=\"true\"></i></div>\n                            <div class=\"dir-name\" [innerText]=\"node.name\"></div>\n                        </div>\n\n                        <ng-container *ngTemplateOutlet=\"treeTmp; context: { nodes: node.children }\"> </ng-container>\n                    </li>\n                }\n            }\n        </ul>\n    }\n</ng-template>\n", styles: [".nxe-tree{position:relative;height:100%;overflow-y:scroll;-webkit-user-select:none;user-select:none}.nxe-tree>.nxe-tree-ul{margin-left:0!important}.nxe-tree-ul{list-style-position:inside;padding:0;margin:0 0 0 20px;position:relative;height:100%}.nxe-tree-ul li{list-style-type:none;position:relative;padding:0}.nxe-tree-ul li .item{display:flex;cursor:pointer;padding:3px 2px;align-items:center}.nxe-tree-ul li .item .chevron{text-align:center;color:#333;width:21px;top:1px;font-size:1.3rem}.nxe-tree-ul li .item .dir-icon{margin-right:5px}.nxe-tree-ul li .item .dir-icon i{color:#555;font-weight:500}.nxe-tree-ul li .item .dir-icon i.nxe-folder{color:#fdb900}.nxe-tree-ul li .item .dir-name{flex:1}.nxe-tree-ul li .item:hover{background-color:#d7edff}.nxe-tree-ul li .item.selected{background-color:#c5e1ff}\n"], dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "pipe", type: AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: TreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-tree', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgTemplateOutlet, NgClass, AsyncPipe, JsonPipe], template: "<div class=\"nxe-tree\">\n    @if (tree$ | async; as tree) {\n        <ng-container *ngTemplateOutlet=\"treeTmp; context: { nodes: tree }\"> </ng-container>\n    }\n</div>\n\n<ng-template #treeTmp let-nodes=\"nodes\">\n    @if (nodes && nodes.length > 0) {\n        <ul class=\"nxe-tree-ul\">\n            @for (node of nodes; track $index) {\n                @if (!node.isLeaf) {\n                    <li>\n                        <div class=\"item\" (click)=\"open(node)\" [ngClass]=\"{ selected: (selectedId$ | async) === node.id }\">\n                            @if (!node.expanded) {\n                                <div class=\"chevron\" (click)=\"expand($event, node)\"><i class=\"nxe-angle-right\" aria-hidden=\"true\"></i></div>\n                            } @else {\n                                <div class=\"chevron\" (click)=\"collapse($event, node)\">\n                                    <i class=\"nxe-angle-down\" aria-hidden=\"true\"></i>\n                                </div>\n                            }\n                            <div class=\"dir-icon\"><i class=\"nxe-folder\" aria-hidden=\"true\"></i></div>\n                            <div class=\"dir-name\" [innerText]=\"node.name\"></div>\n                        </div>\n\n                        <ng-container *ngTemplateOutlet=\"treeTmp; context: { nodes: node.children }\"> </ng-container>\n                    </li>\n                }\n            }\n        </ul>\n    }\n</ng-template>\n", styles: [".nxe-tree{position:relative;height:100%;overflow-y:scroll;-webkit-user-select:none;user-select:none}.nxe-tree>.nxe-tree-ul{margin-left:0!important}.nxe-tree-ul{list-style-position:inside;padding:0;margin:0 0 0 20px;position:relative;height:100%}.nxe-tree-ul li{list-style-type:none;position:relative;padding:0}.nxe-tree-ul li .item{display:flex;cursor:pointer;padding:3px 2px;align-items:center}.nxe-tree-ul li .item .chevron{text-align:center;color:#333;width:21px;top:1px;font-size:1.3rem}.nxe-tree-ul li .item .dir-icon{margin-right:5px}.nxe-tree-ul li .item .dir-icon i{color:#555;font-weight:500}.nxe-tree-ul li .item .dir-icon i.nxe-folder{color:#fdb900}.nxe-tree-ul li .item .dir-name{flex:1}.nxe-tree-ul li .item:hover{background-color:#d7edff}.nxe-tree-ul li .item.selected{background-color:#c5e1ff}\n"] }]
        }] });

class ListComponent extends BaseView {
    constructor() {
        super();
        this.icons = {
            node: 'nxe-folder',
            leaf: 'nxe-doc',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.2", type: ListComponent, isStandalone: true, selector: "nxe-list", usesInheritance: true, ngImport: i0, template: "<div class=\"nxe-list\" nxeDragDrop (dragging)=\"dragging = $event\">\n    <div class=\"nxe-list-drag\" [ngClass]=\"{ dragging: dragging }\"></div>\n    <div class=\"nxe-list-backpad\" (click)=\"emptySpaceClick()\"></div>\n    <div class=\"nxe-list-container\">\n        <div class=\"nxe-list-wrapper\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Size</th>\n                        <th>Last Modified</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    @for (item of items; track $index) {\n                        <tr\n                            (dblclick)=\"open($event, item)\"\n                            (click)=\"select($event, item)\"\n                            [ngClass]=\"{ 'nxe-list-row-selected': isSelected(item) }\"\n                        >\n                            <td>\n                                <span class=\"nxe-list-icon\">\n                                    <i [className]=\"item.isLeaf ? icons.leaf : icons.node\"></i>\n                                </span>\n                                {{ item.name }}\n                            </td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                    }\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n", styles: [".nxe-list{width:100%;height:100%;position:absolute;overflow-y:scroll;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nxe-list .nxe-list-drag{position:absolute;inset:2px;z-index:1}.nxe-list .nxe-list-drag.dragging{border:2px #30a2ff dashed;margin:-2px}.nxe-list .nxe-list-backpad{position:absolute;top:0;left:0;width:100%;height:100%}.nxe-list .nxe-list-container{display:flex;flex-wrap:wrap}.nxe-list .nxe-list-container .nxe-list-wrapper{width:100%;height:100%;display:inline-block;flex-grow:0;z-index:1}.nxe-list .nxe-list-container .nxe-list-wrapper table{width:100%;border-collapse:collapse;border-spacing:0}.nxe-list .nxe-list-container .nxe-list-wrapper table thead{border-bottom:1px solid #ccc}.nxe-list .nxe-list-container .nxe-list-wrapper table thead tr th{text-align:left;padding:10px;border-right:1px solid #ccc;border-spacing:0;border-collapse:collapse;font-weight:400}.nxe-list .nxe-list-container .nxe-list-wrapper table thead tr th:last-child{border-right:none}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr{border-bottom:1px solid #d8d8d8}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr:hover,.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr.nxe-list-row-selected{background-color:#d7edff}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr td{padding:8px 10px}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr td .nxe-list-icon{margin-right:5px;color:#555}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr td .nxe-list-icon .nxe-folder{color:#fdb900}\n"], dependencies: [{ kind: "directive", type: DragDropDirective, selector: "[nxeDragDrop]", outputs: ["dragEnter", "dragOver", "dragLeave", "dragDrop", "dragging"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-list', encapsulation: ViewEncapsulation.None, standalone: true, imports: [DragDropDirective, NgClass], template: "<div class=\"nxe-list\" nxeDragDrop (dragging)=\"dragging = $event\">\n    <div class=\"nxe-list-drag\" [ngClass]=\"{ dragging: dragging }\"></div>\n    <div class=\"nxe-list-backpad\" (click)=\"emptySpaceClick()\"></div>\n    <div class=\"nxe-list-container\">\n        <div class=\"nxe-list-wrapper\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Size</th>\n                        <th>Last Modified</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    @for (item of items; track $index) {\n                        <tr\n                            (dblclick)=\"open($event, item)\"\n                            (click)=\"select($event, item)\"\n                            [ngClass]=\"{ 'nxe-list-row-selected': isSelected(item) }\"\n                        >\n                            <td>\n                                <span class=\"nxe-list-icon\">\n                                    <i [className]=\"item.isLeaf ? icons.leaf : icons.node\"></i>\n                                </span>\n                                {{ item.name }}\n                            </td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                    }\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n", styles: [".nxe-list{width:100%;height:100%;position:absolute;overflow-y:scroll;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nxe-list .nxe-list-drag{position:absolute;inset:2px;z-index:1}.nxe-list .nxe-list-drag.dragging{border:2px #30a2ff dashed;margin:-2px}.nxe-list .nxe-list-backpad{position:absolute;top:0;left:0;width:100%;height:100%}.nxe-list .nxe-list-container{display:flex;flex-wrap:wrap}.nxe-list .nxe-list-container .nxe-list-wrapper{width:100%;height:100%;display:inline-block;flex-grow:0;z-index:1}.nxe-list .nxe-list-container .nxe-list-wrapper table{width:100%;border-collapse:collapse;border-spacing:0}.nxe-list .nxe-list-container .nxe-list-wrapper table thead{border-bottom:1px solid #ccc}.nxe-list .nxe-list-container .nxe-list-wrapper table thead tr th{text-align:left;padding:10px;border-right:1px solid #ccc;border-spacing:0;border-collapse:collapse;font-weight:400}.nxe-list .nxe-list-container .nxe-list-wrapper table thead tr th:last-child{border-right:none}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr{border-bottom:1px solid #d8d8d8}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr:hover,.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr.nxe-list-row-selected{background-color:#d7edff}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr td{padding:8px 10px}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr td .nxe-list-icon{margin-right:5px;color:#555}.nxe-list .nxe-list-container .nxe-list-wrapper table tbody tr td .nxe-list-icon .nxe-folder{color:#fdb900}\n"] }]
        }], ctorParameters: () => [] });

class ViewSwitcherComponent {
    constructor() {
        this.explorerService = inject(ExplorerService);
        this.views = inject(VIEWS);
    }
    setView(view) {
        this.explorerService.currentView$.next(view);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ViewSwitcherComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.2", type: ViewSwitcherComponent, isStandalone: true, selector: "nxe-view-switcher", ngImport: i0, template: "<div class=\"nxe-view-switcher\">\n    @for (item of views; track $index) {\n        <button (click)=\"setView(item.name)\"><i class=\"{{ item.icon }}\"></i></button>\n    }\n</div>\n", styles: [".nxe-view-switcher{padding:10px}.nxe-view-switcher button{cursor:pointer;padding:5px;border-radius:5px;background:transparent;border:0;font-family:inherit;font-size:inherit;font-weight:inherit}.nxe-view-switcher button:hover{background-color:#d7edff}\n"], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ViewSwitcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-view-switcher', encapsulation: ViewEncapsulation.None, standalone: true, template: "<div class=\"nxe-view-switcher\">\n    @for (item of views; track $index) {\n        <button (click)=\"setView(item.name)\"><i class=\"{{ item.icon }}\"></i></button>\n    }\n</div>\n", styles: [".nxe-view-switcher{padding:10px}.nxe-view-switcher button{cursor:pointer;padding:5px;border-radius:5px;background:transparent;border:0;font-family:inherit;font-size:inherit;font-weight:inherit}.nxe-view-switcher button:hover{background-color:#d7edff}\n"] }]
        }] });

class MenuBarComponent {
    constructor() {
        this.explorerService = inject(ExplorerService);
        this.config = inject(CONFIG);
        this.featDelete = this.config.features?.delete;
        this.featUpload = this.config.features?.upload;
        this.featDownload = this.config.features?.download;
        this.featRename = this.config.features?.rename;
        this.featCreateDir = this.config.features?.createDir;
        this.canDownload$ = this.explorerService.selection$.pipe(map$1((n) => n.length === 1 && n[0].isLeaf));
        this.canDelete$ = this.explorerService.selection$.pipe(map$1((n) => n.length > 0));
        this.canRename$ = this.explorerService.selection$.pipe(map$1((n) => n.length === 1));
    }
    createDir() {
        const name = prompt('Enter new name');
        if (name) {
            this.explorerService.createDir(name);
        }
    }
    refresh() {
        this.explorerService.refresh();
    }
    rename() {
        this.explorerService.selection$
            .pipe(take(1), map$1((n) => n[0]))
            .subscribe((node) => {
            const oldName = node.name;
            const newName = prompt('Enter new name', oldName);
            if (newName) {
                this.explorerService.rename(newName);
            }
        });
    }
    runFile() {
        this.explorerService.runFile()
    }
    remove() {
        if (confirm('Are you sure you want to delete the selected files?')) {
            this.explorerService.remove();
        }
    }
    openUploader() {
        this.uploader.nativeElement.click();
    }
    handleFiles(event) {
        const files = event.target.files;
        if (!files || files.length === 0) {
            return;
        }
        this.explorerService.upload(files);
        this.uploader.nativeElement.value = '';
    }
    download() {
        this.explorerService.download();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: MenuBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.2", type: MenuBarComponent, isStandalone: true, selector: "nxe-menu-bar", viewQueries: [{ propertyName: "uploader", first: true, predicate: ["uploader"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"nxe-menu-bar\">\n    <div class=\"nxe-menu-bar-left\">\n        @if (featCreateDir) {\n            <button class=\"nxe-menu-bar-button\" (click)=\"createDir()\"><i class=\"nxe-folder\" aria-hidden=\"true\"></i>New Folder</button>\n        }\n\n        <button class=\"nxe-menu-bar-button\" (click)=\"refresh()\"><i class=\"nxe-arrows-cw\" aria-hidden=\"true\"></i> Refresh</button>\n\n        @if (featUpload) {\n            <button class=\"nxe-menu-bar-button\" (click)=\"openUploader()\"><i class=\"nxe-upload\" aria-hidden=\"true\"></i> Upload</button>\n        }\n\n        @if (featDownload) {\n            <button class=\"nxe-menu-bar-button\" [disabled]=\"!(canDownload$ | async)\" (click)=\"download()\">\n                <i class=\"nxe-download\" aria-hidden=\"true\"></i> Download\n            </button>\n            <button class=\"nxe-menu-bar-button\" [disabled]=\"!(canDownload$ | async)\" (click)=\"runFile()\">\n                <i class=\"nxe-download\" aria-hidden=\"true\"></i> Execute\n            </button>\n        }\n\n        @if (featRename) {\n            <button class=\"nxe-menu-bar-button\" [disabled]=\"!(canRename$ | async)\" (click)=\"rename()\">\n                <i class=\"nxe-edit\" aria-hidden=\"true\"></i> Rename\n            </button>\n        }\n\n        @if (featDelete) {\n            <button class=\"nxe-menu-bar-button\" [disabled]=\"!(canDelete$ | async)\" (click)=\"remove()\">\n                <i class=\"nxe-trash-empty\" aria-hidden=\"true\"></i> Delete\n            </button>\n        }\n    </div>\n    <div class=\"nxe-menu-bar-right\">\n        <nxe-view-switcher></nxe-view-switcher>\n    </div>\n    <input style=\"display: none\" type=\"file\" multiple (change)=\"handleFiles($event)\" #uploader />\n</div>\n", styles: [".nxe-menu-bar{display:flex}.nxe-menu-bar .nxe-menu-bar-left{flex-grow:1;padding:10px}.nxe-menu-bar .nxe-menu-bar-button{cursor:pointer;padding:5px;border-radius:5px;background:transparent;border:0;font-family:inherit;font-size:inherit;font-weight:inherit;margin-right:20px}.nxe-menu-bar .nxe-menu-bar-button .nxe-folder{color:#fdb900}.nxe-menu-bar .nxe-menu-bar-button .nxe-arrows-cw{color:green}.nxe-menu-bar .nxe-menu-bar-button .nxe-trash-empty{color:#ca0801}.nxe-menu-bar .nxe-menu-bar-button:hover{background-color:#d7edff}\n"], dependencies: [{ kind: "component", type: ViewSwitcherComponent, selector: "nxe-view-switcher" }, { kind: "pipe", type: AsyncPipe, name: "async" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: MenuBarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-menu-bar', encapsulation: ViewEncapsulation.None, standalone: true, imports: [ViewSwitcherComponent, AsyncPipe], template: "<div class=\"nxe-menu-bar\">\n    <div class=\"nxe-menu-bar-left\">\n        @if (featCreateDir) {\n            <button class=\"nxe-menu-bar-button\" (click)=\"createDir()\"><i class=\"nxe-folder\" aria-hidden=\"true\"></i>New Folder</button>\n        }\n\n        <button class=\"nxe-menu-bar-button\" (click)=\"refresh()\"><i class=\"nxe-arrows-cw\" aria-hidden=\"true\"></i> Refresh</button>\n\n        @if (featUpload) {\n            <button class=\"nxe-menu-bar-button\" (click)=\"openUploader()\"><i class=\"nxe-upload\" aria-hidden=\"true\"></i> Upload</button>\n        }\n\n        @if (featDownload) {\n            <button class=\"nxe-menu-bar-button\" [disabled]=\"!(canDownload$ | async)\" (click)=\"download()\">\n                <i class=\"nxe-download\" aria-hidden=\"true\"></i> Download\n            </button>\n            <button class=\"nxe-menu-bar-button\" [disabled]=\"!(canDownload$ | async)\" (click)=\"runFile()\">\n                <i class=\"nxe-download\" aria-hidden=\"true\"></i> Execute\n            </button>\n        }\n\n        @if (featRename) {\n            <button class=\"nxe-menu-bar-button\" [disabled]=\"!(canRename$ | async)\" (click)=\"rename()\">\n                <i class=\"nxe-edit\" aria-hidden=\"true\"></i> Rename\n            </button>\n        }\n\n        @if (featDelete) {\n            <button class=\"nxe-menu-bar-button\" [disabled]=\"!(canDelete$ | async)\" (click)=\"remove()\">\n                <i class=\"nxe-trash-empty\" aria-hidden=\"true\"></i> Delete\n            </button>\n        }\n    </div>\n    <div class=\"nxe-menu-bar-right\">\n        <nxe-view-switcher></nxe-view-switcher>\n    </div>\n    <input style=\"display: none\" type=\"file\" multiple (change)=\"handleFiles($event)\" #uploader />\n</div>\n", styles: [".nxe-menu-bar{display:flex}.nxe-menu-bar .nxe-menu-bar-left{flex-grow:1;padding:10px}.nxe-menu-bar .nxe-menu-bar-button{cursor:pointer;padding:5px;border-radius:5px;background:transparent;border:0;font-family:inherit;font-size:inherit;font-weight:inherit;margin-right:20px}.nxe-menu-bar .nxe-menu-bar-button .nxe-folder{color:#fdb900}.nxe-menu-bar .nxe-menu-bar-button .nxe-arrows-cw{color:green}.nxe-menu-bar .nxe-menu-bar-button .nxe-trash-empty{color:#ca0801}.nxe-menu-bar .nxe-menu-bar-button:hover{background-color:#d7edff}\n"] }]
        }], propDecorators: { uploader: [{
                type: ViewChild,
                args: ['uploader', { static: true }]
            }] } });

class BreadcrumbsComponent {
    constructor() {
        this.explorerService = inject(ExplorerService);
        this.config = inject(CONFIG);
        this.breadcrumbs$ = this.explorerService.openedDir$.pipe(map$1((n) => {
            if (!n) {
                return [];
            }
            const pieces = [];
            let currentNode = n;
            while (currentNode.parentId) {
                pieces.unshift({ name: currentNode.name || this.config.homeNodeName || '', node: currentNode });
                currentNode = this.explorerService.getNode(currentNode.parentId);
            }
            pieces.unshift({ name: currentNode.name || this.config.homeNodeName || '', node: currentNode });
            return pieces;
        }));
    }
    click(crumb) {
        this.explorerService.openNode(crumb.node.id);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: BreadcrumbsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.2", type: BreadcrumbsComponent, isStandalone: true, selector: "nxe-breadcrumbs", ngImport: i0, template: "<div class=\"nxe-breadcrumbs\">\n    @for (crumb of breadcrumbs$ | async; track $index; let last = $last) {\n        <span>\n            <button (click)=\"click(crumb)\" class=\"nxe-breadcrumb-button\">{{ crumb.name }}</button>\n            @if (!last) {\n                <span class=\"nxe-breadcrumb-separator\">\n                    <i class=\"nxe-angle-right\" aria-hidden=\"true\"></i>\n                </span>\n            }\n        </span>\n    }\n</div>\n", styles: [".nxe-breadcrumbs .nxe-breadcrumb-button{cursor:pointer;padding:5px;border-radius:5px;background:transparent;border:0;font-family:inherit;font-size:inherit;font-weight:inherit}.nxe-breadcrumbs .nxe-breadcrumb-button:hover{background-color:#d7edff}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: BreadcrumbsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-breadcrumbs', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [AsyncPipe], template: "<div class=\"nxe-breadcrumbs\">\n    @for (crumb of breadcrumbs$ | async; track $index; let last = $last) {\n        <span>\n            <button (click)=\"click(crumb)\" class=\"nxe-breadcrumb-button\">{{ crumb.name }}</button>\n            @if (!last) {\n                <span class=\"nxe-breadcrumb-separator\">\n                    <i class=\"nxe-angle-right\" aria-hidden=\"true\"></i>\n                </span>\n            }\n        </span>\n    }\n</div>\n", styles: [".nxe-breadcrumbs .nxe-breadcrumb-button{cursor:pointer;padding:5px;border-radius:5px;background:transparent;border:0;font-family:inherit;font-size:inherit;font-weight:inherit}.nxe-breadcrumbs .nxe-breadcrumb-button:hover{background-color:#d7edff}\n"] }]
        }] });

class ContentComponent {
    constructor() {
        this.explorerService = inject(ExplorerService);
        this.views = inject(VIEWS);
        this.viewComponent$ = this.explorerService.currentView$.pipe(map$1((view) => this.views.find((v) => v.name === view).component));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.2", type: ContentComponent, isStandalone: true, selector: "nxe-content", ngImport: i0, template: "<div class=\"nxe-content\">\n    <div class=\"nxe-content-top\">\n        <nxe-menu-bar></nxe-menu-bar>\n    </div>\n    <div class=\"nxe-content-top\">\n        <nxe-breadcrumbs></nxe-breadcrumbs>\n    </div>\n    <div class=\"nxe-content-middle\">\n        <ng-container *ngComponentOutlet=\"viewComponent$ | async\"></ng-container>\n    </div>\n</div>\n", styles: [".nxe-content{display:flex;flex-flow:column;height:100%}.nxe-content .nxe-content-top{border-bottom:1px solid #ccc}.nxe-content .nxe-content-middle{display:block;position:relative;flex:1 1 auto;border-bottom:1px solid #ccc}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: MenuBarComponent, selector: "nxe-menu-bar" }, { kind: "component", type: BreadcrumbsComponent, selector: "nxe-breadcrumbs" }, { kind: "directive", type: NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-content', standalone: true, imports: [AsyncPipe, MenuBarComponent, TreeComponent, BreadcrumbsComponent, IconsComponent, ListComponent, NgComponentOutlet], template: "<div class=\"nxe-content\">\n    <div class=\"nxe-content-top\">\n        <nxe-menu-bar></nxe-menu-bar>\n    </div>\n    <div class=\"nxe-content-top\">\n        <nxe-breadcrumbs></nxe-breadcrumbs>\n    </div>\n    <div class=\"nxe-content-middle\">\n        <ng-container *ngComponentOutlet=\"viewComponent$ | async\"></ng-container>\n    </div>\n</div>\n", styles: [".nxe-content{display:flex;flex-flow:column;height:100%}.nxe-content .nxe-content-top{border-bottom:1px solid #ccc}.nxe-content .nxe-content-middle{display:block;position:relative;flex:1 1 auto;border-bottom:1px solid #ccc}\n"] }]
        }] });

class ExplorerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ExplorerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.2", type: ExplorerComponent, isStandalone: true, selector: "nxe-explorer", ngImport: i0, template: "<div class=\"nxe-explorer\">\n    <div class=\"nxe-explorer-left\">\n        <nxe-tree></nxe-tree>\n    </div>\n    <div class=\"nxe-explorer-right\">\n        <nxe-content></nxe-content>\n    </div>\n</div>\n", styles: [".nxe-explorer{display:flex;flex-flow:row;height:100%}.nxe-explorer .nxe-explorer-left{width:20%;border-right:1px solid #ccc}.nxe-explorer .nxe-explorer-right{flex-grow:1}\n"], dependencies: [{ kind: "component", type: TreeComponent, selector: "nxe-tree" }, { kind: "component", type: ContentComponent, selector: "nxe-content" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: ExplorerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-explorer', standalone: true, imports: [TreeComponent, ContentComponent], template: "<div class=\"nxe-explorer\">\n    <div class=\"nxe-explorer-left\">\n        <nxe-tree></nxe-tree>\n    </div>\n    <div class=\"nxe-explorer-right\">\n        <nxe-content></nxe-content>\n    </div>\n</div>\n", styles: [".nxe-explorer{display:flex;flex-flow:row;height:100%}.nxe-explorer .nxe-explorer-left{width:20%;border-right:1px solid #ccc}.nxe-explorer .nxe-explorer-right{flex-grow:1}\n"] }]
        }] });

/*
 * Public API Surface of ngx-explorer
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BaseView, BreadcrumbsComponent, CONFIG, ContentComponent, DEFAULT_CONFIG, DataService, ExplorerComponent, ExplorerService, IconsComponent, ListComponent, MenuBarComponent, TreeComponent, Utils, VIEWS, ViewSwitcherComponent };
//# sourceMappingURL=ngx-explorer.mjs.map
