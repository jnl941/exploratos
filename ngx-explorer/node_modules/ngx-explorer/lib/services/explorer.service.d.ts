import { BehaviorSubject } from 'rxjs';
import { INode, Data } from '../shared/types';
import * as i0 from "@angular/core";
export declare class ExplorerService {
    private dataService;
    private config;
    private views;
    private internalTree;
    private flatPointers;
    private readonly selectedNodes$$;
    private readonly openedNode$$;
    private readonly root$$;
    readonly currentView$: BehaviorSubject<string>;
    /**
     * An Observable that emits the currently selected nodes in the explorer.
     * Subscribers can use this to react to changes in the selection.
     */
    readonly selection$: import("rxjs").Observable<INode[]>;
    /**
     * An Observable that emits the currently opened directory in the explorer.
     * Subscribers can use this to react to changes in the opened directory.
     */
    readonly openedDir$: import("rxjs").Observable<INode | undefined>;
    /**
     * An Observable that emits the root node of the explorer.
     * Subscribers can use this to react to changes in the root node.
     */
    readonly root$: import("rxjs").Observable<INode>;
    /**
     * Returns the node with the given id.
     * @param id The id of the node to retrieve.
     */
    getNode(id: number): INode;
    /**
     * Sets the selected nodes in the explorer.
     * @param nodes The nodes to select.
     */
    select(nodes: INode[]): void;
    /**
     * Opens the node with the given id. If no id is provided, the root node is opened.
     * @param id The id of the node to open.
     */
    openNode(id?: number): void;
    /**
     * Expands the node with the given id.
     * @param id The id of the node to expand.
     */
    expand(id: number): void;
    collapse(id: number): void;
    /**
     * Creates a new directory with the given name in the currently opened directory.
     * @param name The name of the new directory.
     */
    createDir(name: string): void;
    /**
     * Refreshes the currently opened node.
     */
    refresh(): void;
    /**
     * Renames the currently selected node.
     * @param name The new name for the node.
     */
    rename(name: string): void;
    /**
     * Removes the currently selected nodes.
     */
    remove(): void;
    /**
     * Uploads the given files to the currently opened directory.
     * @param files The files to upload.
     */
    upload(files: FileList): void;
    /**
     * Downloads the currently selected file.
     */
    runFile(): void;
    download(): void;
    /**
     * Open node and get all parent nodes
     * Ideal for opening a previously opened node by value
     */
    openTree(data: Data): void;
    private getContent;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExplorerService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ExplorerService>;
}
