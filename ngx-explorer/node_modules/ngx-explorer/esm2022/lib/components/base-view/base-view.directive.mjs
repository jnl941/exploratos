import { Directive, inject } from '@angular/core';
import { Subscription } from 'rxjs';
import { CONFIG } from '../../shared/providers';
import { ExplorerService } from '../../services/explorer.service';
import * as i0 from "@angular/core";
export class BaseView {
    constructor() {
        this.selection = new Set();
        this.items = [];
        this.dragging = false;
        this.subs = new Subscription();
        this.explorerService = inject(ExplorerService);
        this.config = inject(CONFIG);
        this.subs.add(this.explorerService.openedDir$.subscribe((nodes) => {
            this.items = nodes ? nodes.children : [];
        }));
        this.subs.add(this.explorerService.selection$.subscribe((nodes) => {
            this.selection.clear();
            if (nodes) {
                this.selection = new Set(nodes.map((n) => n.id));
            }
        }));
    }
    select(event, item) {
        const shiftKeyPressed = event.shiftKey;
        const metaKeyPressed = event.metaKey || event.ctrlKey;
        if (this.config.multipleSelection && shiftKeyPressed) {
            if (this.selection.size === 0) {
                this.selection.add(item.id);
                this.shiftSelectionStartId = item.id;
            }
            else {
                this.selection.clear();
                const headIndex = this.items.findIndex((i) => i.id === this.shiftSelectionStartId);
                const currentIndex = this.items.findIndex((i) => i.id === item.id);
                const start = Math.min(headIndex, currentIndex);
                const end = Math.max(headIndex, currentIndex);
                for (let i = start; i <= end; i++) {
                    this.selection.add(this.items[i].id);
                }
            }
        }
        else {
            if (this.config.multipleSelection && metaKeyPressed) {
                if (this.selection.has(item.id)) {
                    this.selection.delete(item.id);
                }
                else {
                    this.selection.add(item.id);
                }
            }
            else {
                this.selection.clear();
                this.shiftSelectionStartId = item.id;
                this.selection.add(item.id);
            }
        }
        const nodes = this.items.filter((i) => this.selection.has(i.id));
        this.explorerService.select(nodes);
    }
    open(event, item) {
        const metaKeyPressed = event.metaKey || event.ctrlKey || event.shiftKey;
        if (!metaKeyPressed) {
            this.explorerService.openNode(item.id);
        }
    }
    isSelected(item) {
        return this.selection.has(item.id);
    }
    emptySpaceClick() {
        this.explorerService.select([]);
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: BaseView, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.2", type: BaseView, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: BaseView, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,