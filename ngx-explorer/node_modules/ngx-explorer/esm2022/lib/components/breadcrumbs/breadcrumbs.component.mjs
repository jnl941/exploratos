import { ChangeDetectionStrategy, Component, ViewEncapsulation, inject } from '@angular/core';
import { map } from 'rxjs';
import { ExplorerService } from '../../services/explorer.service';
import { CONFIG } from '../../shared/providers';
import { AsyncPipe } from '@angular/common';
import * as i0 from "@angular/core";
export class BreadcrumbsComponent {
    constructor() {
        this.explorerService = inject(ExplorerService);
        this.config = inject(CONFIG);
        this.breadcrumbs$ = this.explorerService.openedDir$.pipe(map((n) => {
            if (!n) {
                return [];
            }
            const pieces = [];
            let currentNode = n;
            while (currentNode.parentId) {
                pieces.unshift({ name: currentNode.name || this.config.homeNodeName || '', node: currentNode });
                currentNode = this.explorerService.getNode(currentNode.parentId);
            }
            pieces.unshift({ name: currentNode.name || this.config.homeNodeName || '', node: currentNode });
            return pieces;
        }));
    }
    click(crumb) {
        this.explorerService.openNode(crumb.node.id);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: BreadcrumbsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.2", type: BreadcrumbsComponent, isStandalone: true, selector: "nxe-breadcrumbs", ngImport: i0, template: "<div class=\"nxe-breadcrumbs\">\n    @for (crumb of breadcrumbs$ | async; track $index; let last = $last) {\n        <span>\n            <button (click)=\"click(crumb)\" class=\"nxe-breadcrumb-button\">{{ crumb.name }}</button>\n            @if (!last) {\n                <span class=\"nxe-breadcrumb-separator\">\n                    <i class=\"nxe-angle-right\" aria-hidden=\"true\"></i>\n                </span>\n            }\n        </span>\n    }\n</div>\n", styles: [".nxe-breadcrumbs .nxe-breadcrumb-button{cursor:pointer;padding:5px;border-radius:5px;background:transparent;border:0;font-family:inherit;font-size:inherit;font-weight:inherit}.nxe-breadcrumbs .nxe-breadcrumb-button:hover{background-color:#d7edff}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.2", ngImport: i0, type: BreadcrumbsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nxe-breadcrumbs', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [AsyncPipe], template: "<div class=\"nxe-breadcrumbs\">\n    @for (crumb of breadcrumbs$ | async; track $index; let last = $last) {\n        <span>\n            <button (click)=\"click(crumb)\" class=\"nxe-breadcrumb-button\">{{ crumb.name }}</button>\n            @if (!last) {\n                <span class=\"nxe-breadcrumb-separator\">\n                    <i class=\"nxe-angle-right\" aria-hidden=\"true\"></i>\n                </span>\n            }\n        </span>\n    }\n</div>\n", styles: [".nxe-breadcrumbs .nxe-breadcrumb-button{cursor:pointer;padding:5px;border-radius:5px;background:transparent;border:0;font-family:inherit;font-size:inherit;font-weight:inherit}.nxe-breadcrumbs .nxe-breadcrumb-button:hover{background-color:#d7edff}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWV4cGxvcmVyL3NyYy9saWIvY29tcG9uZW50cy9icmVhZGNydW1icy9icmVhZGNydW1icy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZXhwbG9yZXIvc3JjL2xpYi9jb21wb25lbnRzL2JyZWFkY3J1bWJzL2JyZWFkY3J1bWJzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFM0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBZ0I1QyxNQUFNLE9BQU8sb0JBQW9CO0lBVGpDO1FBVVksb0JBQWUsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUMsV0FBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV6QixpQkFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDdEQsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDTixJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNKLE9BQU8sRUFBRSxDQUFDO2FBQ2I7WUFDRCxNQUFNLE1BQU0sR0FBRyxFQUFrQixDQUFDO1lBQ2xDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztZQUNwQixPQUFPLFdBQVcsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3pCLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7Z0JBQ2hHLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDcEU7WUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ2hHLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUNMLENBQUM7S0FLTDtJQUhVLEtBQUssQ0FBQyxLQUFpQjtRQUMxQixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7OEdBdEJRLG9CQUFvQjtrR0FBcEIsb0JBQW9CLDJFQ3JCakMsaWRBWUEsNlNET2MsU0FBUzs7MkZBRVYsb0JBQW9CO2tCQVRoQyxTQUFTOytCQUNJLGlCQUFpQixpQkFHWixpQkFBaUIsQ0FBQyxJQUFJLG1CQUNwQix1QkFBdUIsQ0FBQyxNQUFNLGNBQ25DLElBQUksV0FDUCxDQUFDLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSU5vZGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvdHlwZXMnO1xuaW1wb3J0IHsgRXhwbG9yZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZXhwbG9yZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuLi8uLi9zaGFyZWQvcHJvdmlkZXJzJztcbmltcG9ydCB7IEFzeW5jUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmludGVyZmFjZSBCcmVhZGNydW1iIHtcbiAgICBub2RlOiBJTm9kZTtcbiAgICBuYW1lOiBzdHJpbmc7XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbnhlLWJyZWFkY3J1bWJzJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYnJlYWRjcnVtYnMuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2JyZWFkY3J1bWJzLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIGltcG9ydHM6IFtBc3luY1BpcGVdLFxufSlcbmV4cG9ydCBjbGFzcyBCcmVhZGNydW1ic0NvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBleHBsb3JlclNlcnZpY2UgPSBpbmplY3QoRXhwbG9yZXJTZXJ2aWNlKTtcbiAgICBwcml2YXRlIGNvbmZpZyA9IGluamVjdChDT05GSUcpO1xuXG4gICAgcHVibGljIGJyZWFkY3J1bWJzJCA9IHRoaXMuZXhwbG9yZXJTZXJ2aWNlLm9wZW5lZERpciQucGlwZShcbiAgICAgICAgbWFwKChuKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwaWVjZXMgPSBbXSBhcyBCcmVhZGNydW1iW107XG4gICAgICAgICAgICBsZXQgY3VycmVudE5vZGUgPSBuO1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnROb2RlLnBhcmVudElkKSB7XG4gICAgICAgICAgICAgICAgcGllY2VzLnVuc2hpZnQoeyBuYW1lOiBjdXJyZW50Tm9kZS5uYW1lIHx8IHRoaXMuY29uZmlnLmhvbWVOb2RlTmFtZSB8fCAnJywgbm9kZTogY3VycmVudE5vZGUgfSk7XG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSB0aGlzLmV4cGxvcmVyU2VydmljZS5nZXROb2RlKGN1cnJlbnROb2RlLnBhcmVudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBpZWNlcy51bnNoaWZ0KHsgbmFtZTogY3VycmVudE5vZGUubmFtZSB8fCB0aGlzLmNvbmZpZy5ob21lTm9kZU5hbWUgfHwgJycsIG5vZGU6IGN1cnJlbnROb2RlIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHBpZWNlcztcbiAgICAgICAgfSlcbiAgICApO1xuXG4gICAgcHVibGljIGNsaWNrKGNydW1iOiBCcmVhZGNydW1iKSB7XG4gICAgICAgIHRoaXMuZXhwbG9yZXJTZXJ2aWNlLm9wZW5Ob2RlKGNydW1iLm5vZGUuaWQpO1xuICAgIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJueGUtYnJlYWRjcnVtYnNcIj5cbiAgICBAZm9yIChjcnVtYiBvZiBicmVhZGNydW1icyQgfCBhc3luYzsgdHJhY2sgJGluZGV4OyBsZXQgbGFzdCA9ICRsYXN0KSB7XG4gICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPGJ1dHRvbiAoY2xpY2spPVwiY2xpY2soY3J1bWIpXCIgY2xhc3M9XCJueGUtYnJlYWRjcnVtYi1idXR0b25cIj57eyBjcnVtYi5uYW1lIH19PC9idXR0b24+XG4gICAgICAgICAgICBAaWYgKCFsYXN0KSB7XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJueGUtYnJlYWRjcnVtYi1zZXBhcmF0b3JcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJueGUtYW5nbGUtcmlnaHRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICA8L3NwYW4+XG4gICAgfVxuPC9kaXY+XG4iXX0=